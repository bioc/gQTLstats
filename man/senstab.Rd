\name{senstab}
\alias{senstab}
\alias{plot.senstab}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
create a plottable table for eQTL sensitivity analysis visualization
}
\description{
create a plottable table for eQTL sensitivity analysis visualization
}
\usage{
senstab(x, filt = force)
plot(x)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{x}{
a list generated by a process analogous to the
sensitivity survey exhibited in the example below
}
  \item{filt}{
a function that operates on and returns a data.frame; typically
will select rows based on values of fields 'MAF' and 'radius'}
}
\details{
See extensive non-executed code in example below
}
\value{
an instance of the S3 class 'senstab', 'data.frame'
}
%\references{
%% ~put references to the literature/web site here ~
%}
%\author{
%%  ~~who you are~~
%}
%\note{
%%  ~~further notes~~
%}

%% ~Make other sections like Warning with \section{Warning }{....} ~

%\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
%}
\examples{
\dontrun{
#
# illustration of sensitivity analysis using BatchJobs
#
# assume the following content in 'parms.R' (uncommented)
# MAFS = c(.03, .04, .05, .075, .10, .125, .15)
# dists = c(5000, 7500, 10000, 15000, 20000, 
#    25000, 50000, 100000, 250000, 500000, 750000, 1000000)
# parms = expand.grid(MAFS, dists)
library(BatchJobs)  # for bigStore manip
library(gQTLstats)
library(BiocParallel)

# could use multilevel parallelism here
# because it is a somewhat large, fragile job, BatchJobs
# is a relevant tool for iteration.  but storeToFDRByProbe is
# already using bplapply.  so register 3 cores for it 
# and specify 15 cpu for BatchJobs in .BatchJobs.R

register(MulticoreParam(workers=3))

sens1 = makeRegistry("sens1", file.dir="sens1", 
    packages=c("BiocParallel", "gQTLstats", "dplyr"),
    src.files="parms.R")  # note parms.R

sens4One = function(z) {
      library(BiocParallel)
      load("../bigStore.rda")  # get a ciseStore instance
      register(MulticoreParam(workers=3))  
      ans = storeToFDRByProbe(bigStore, xprobs=seq(.01,.99,.01), # xprobs
                                          # needs to be chosen with care
      filter=function(x) x[which(x$MAF >= parms[z,1] & 
          x$mindist <= parms[z,2])])
      ans = setFDRfunc(ans, span=.35)  # span can be important
      list(fdrsupp=ans, parms=parms[z,])
 }

batchMap(sens1, sens4One, 1:nrow(parms))
submitJobs(sens1)

# now loadResult(sens1) or the equivalent can be the input to senstab()
# as in the example to continue here:
}
data(sensByProbe)
ptab = t(sapply(sensByProbe, function(x)as.numeric(x[[2]])))
unique(ptab[,1]) # MAFs used
unique(ptab[,2]) # radii used
# here we filter away some extreme values of the design space
tab = senstab(sensByProbe, filt=function(x) {
    x[ x$radius > 10000 & x$ radius < 500000 & x$MAF > .03, ]
    } )
plot(tab)
}
\keyword{ models }
